{
  "_from": "piece-length@^1.0.0",
  "_id": "piece-length@1.0.1",
  "_inBundle": false,
  "_integrity": "sha512-7JNneRNPcdyNLvCF9/HR4shVJFn2Sx/RUUCmaloklNUa+zhthhb1S6QBprg+C3LIgcOUWDQDws+AIiTYawtE4A==",
  "_location": "/piece-length",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "piece-length@^1.0.0",
    "name": "piece-length",
    "escapedName": "piece-length",
    "rawSpec": "^1.0.0",
    "saveSpec": null,
    "fetchSpec": "^1.0.0"
  },
  "_requiredBy": [
    "/create-torrent"
  ],
  "_resolved": "https://registry.npmjs.org/piece-length/-/piece-length-1.0.1.tgz",
  "_shasum": "fb074d989e3af86e23bfefab036818133f4ad782",
  "_spec": "piece-length@^1.0.0",
  "_where": "E:\\dev\\src_opensource\\bugout\\docs\\examples\\node\\node_modules\\create-torrent",
  "author": "",
  "bundleDependencies": false,
  "deprecated": false,
  "description": "piece-length finds the optimal piece length for a given number of bytes. Optimal for what exactly? BitTorrent. [VuzeWiki](http://wiki.vuze.com/w/Torrent_Piece_Size) and [TorrentFreak](http://torrentfreak.com/how-to-make-the-best-torrents-081121/) have both released some examples of ideal piece lengths, and this algorithm will reproduce them.",
  "devDependencies": {
    "tape": "^4.11.0"
  },
  "license": "MIT",
  "main": "index.js",
  "name": "piece-length",
  "scripts": {
    "test": "node test"
  },
  "version": "1.0.1"
}
